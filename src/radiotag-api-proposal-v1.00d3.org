#+STARTUP: hideblocks logdone indent
#+TODO: TODO(t) WIP(w) DELEGATED(D) BUG(b) HELD(h) BLOCKED(k) | DONE(d) REJECTED(r) CANCELLED(c)
#+EXPORT_EXCLUDE_TAGS: private draft
#+OPTIONS: ^:{} <:nil todo:nil tags:nil num:nil H:4
#+COMMENT: ^:{} = leave underscores alone, <:nil = turn off timestamps, todo:nil = turn off TODO; same for tags
#+COMMENT: num:nil = don't number headings; H:n = use <Hn> tags up to level n
#+MACRO: INC \n#+source: $1\n#+begin_src $2\n#+include: $1\n#+end_src\n
#+STYLE: <link rel="stylesheet" type="text/css" href="http://radiotag.prototype0.net/docs/css/reset-min.css">
#+STYLE: <link rel="stylesheet" type="text/css" href="http://radiotag.prototype0.net/docs/css/default.css">
#+STYLE: <link rel="stylesheet" type="text/css" href="http://radiotag.prototype0.net/docs/css/style.css">
#+STYLE: <link rel="stylesheet" type="text/css" href="http://radiotag.prototype0.net/docs/css/org-font-lock.css" />
#+STYLE: <link rel="stylesheet" type="text/css" href="http://radiotag.prototype0.net/docs/css/print.css" media="print" />
#+STYLE: <link rel="stylesheet" type="text/css" href="http://radiotag.prototype0.net/docs/css/tables.css" />
#+TITLE: RadioTAG Specification Version 1.00 (draft 3)
#+AUTHOR: Sean O'Halpin (c) 2011-2012 BBC R&amp;D
#+COPYRIGHT: (c) BBC 2011
#+COMPANY: BBC R&amp;D Prototyping
#+OPTIONS: toc:2 H:4 author:t num:t
#+LINK: rfc http://tools.ietf.org/html/rfc%s
#+LINK: wp http://en.wikipedia.org/wiki/%s

- Authors: Sean O'Halpin (BBC R&D), Chris Lowis (BBC R&D)
- Contributors: Andy Buckingham (Global Media), Robin Cooksey
  (Frontier Silicon)
- Published:
  - Draft 1: 2011-09-01
  - Draft 2: 2011-10-27
  - Draft 3: 2012-02-08
    - Changed /register return code from 201 to 204
- URL: http://radiotag.prototyping.bbc.co.uk/docs/radiotag-api-proposal-v1.00d3.html

* Abstract

This document specifies version 1.00 of the RadioTAG protocol.

The RadioTAG protocol defines how a client (e.g. an IP-enabled radio)
discovers whether a broadcaster supports RadioTAG and if so how it
then communicates with a broadcaster-provided web service to record
the time and station being listened to.

The protocol defines how a client obtains authorization to store data
on the server and how it can become paired with a user account so that
data can be accessed via the web.

The protocol also defines the format and content of the requests and
responses that pass between the client and server.

* How to read this document

The document starts with an overview of the [[Concepts][concepts]] underlying the
RadioTAG protocol. These concepts are summarized in the [[Glossary][glossary]].

To get an idea of how the RadioTAG protocol works in practice, read
the two [[Narratives][narratives]]. These step through the two most common scenarios
to show what is communicated between the client (radio) and the tag
service at the HTTP level. This section is particularly useful for
developers who want to understand how the various bits of the API hang
together.

For full details about each endpoint provided by the tag service, read
the [[API]] section.

Finally, to see how the Atom format is used in tag responses, what
each element contains and what limits apply, see [[Data%20formats][data formats]].

* Concepts

A client sends a tag request to a tag service, specifying a time and
station. The tag service responds by sending a tag entry containing
relevant metadata. The tag data may be stored on the server and may be
viewed on the client or on the web or be used for another
application.

** TODO Service discovery
[TODO] RadioDNS lookup.
** TODO HTTPS
[TODO] All API calls must use HTTPS.
** Tag requests

A tag /request/ specifies a time and station. The time is specified
using seconds since Jan 1 1970, i.e. the Unix epoch. The station is
specified using the RadioDNS broadcast parameters.

How that information is interpreted is up to the broadcaster.

** Tag responses

The content of the /response/ to a tag request is up to the
broadcaster but must follow the [[http://tools.ietf.org/html/rfc4287][Atom Syndication Format]] as [[Data formats][specified
below]]. A tag response could contain programme, now playing metadata,
an advertising message or the response to a call for action.

** Clients, radios and devices

In this specification, the *client* is any device or software program
that implements the client side of the RadioTAG specification. While
this would most commonly be an IP-enabled radio, it could also be,
say, an application running on a mobile phone or in a web browser.

** The tag service

The *tag service* is the web service provided by the broadcaster to
respond to client requests. It must implement a number of endpoints
depending on the level of service it provides.

** Levels of service

There are three levels of service a tag service can provide:

- anonymous tagging
- unpaired tagging
- paired tagging

Pairing in this context means associating your radio with an
authenticated user account.

The levels of service are distinguished by whether or not tags are
retrievable on the device or on the web and by whether you need an
account on the broadcaster's web service. The table below summarizes
the differences:

| Level of service | Tag list on device | Tag list on web | Account needed |
|------------------+--------------------+-----------------+----------------|
| Anonymous        | No                 | No              | No             |
| Unpaired         | Yes                | No              | No             |
| Paired           | Yes                | Yes             | Yes            |

These services can be offered in a number of combinations. For
example, a service may offer anonymous tagging by default which can be
upgraded to paired tagging or it may support tagging out of the box
(unpaired) with no option to pair the device to a web account. These
are the possible combinations:

- Anonymous only
- Anonymous upgradeable to paired
- Unpaired only
- Unpaired upgradeable to paired

** Anonymous tagging

Anonymous tagging is the minimal level of service. The broadcaster
must provide the following endpoint:

- [[POST /tag]]

A =POST= to this endpoint should return metadata relevant to the
station and time specified in the request. Tags are /not/ stored on
the server so it is not possible to retrieve a list of tags on the
client.

** Unpaired tagging

Unpaired tagging is designed to provide an "out-of-the-box" experience
without the user having to create an account and pair the client. The
protocol enables the client to become authorized to store tags on the
server without being associated with an authenticated user account.

To indicate that it supports unpaired tagging, the server must issue
an =unpaired= [[Grants][grant]] in response to an unauthorized request to =POST
/tag=. It must provide the following endpoints:

- [[POST /tag]]
- [[POST /token]]
- [[GET /tags]]

Tags are stored on the server. The server must be able to store at
least 10 tags per client. There is no upper limit. A typical
implementation would store the tags as a FIFO list. When the list is
full, a new tag would replace the oldest in the list.

A client should implement an interface to display the current list of
tags associated with it as returned by the =GET /tags= method.

Note that with unpaired tagging, the client stores a token which
uniquely identifies it to the tag service for the lifetime of that
token only. If that identity is reset by the client deleting the
token, any tags which have been submitted against it are effectively
orphaned.

** Paired tagging

Paired tagging is where the client has been paired to a user's
account on a tag service. The same limits apply as for unpaired
tagging, though a typical implementation will not put any limit on how
many tags a user can create.

A tag service that allows paired tagging must provide the following
endpoints:

- [[POST /tag]]
- [[POST /token]]
- [[GET /tags]]
- [[POST /registration_key]]
- [[POST /register]]

** Authorization

Authorization is based on OAuth 2.0. The central concepts here are
*tokens* and *grants*.

To store or retrieve anything at the tag service, a client needs a
*token*. A valid token authorizes the client to perform a specific set
of actions. In the case of RadioTAG, those actions are to [[POST /tag][create a tag]]
or [[GET /tags][get a list of tags]] for either an [[Unpaired tagging][unpaired]] or [[Paired tagging][paired]] account.

To obtain a token, the client must use the *grant* passed back from
the server in a response header.

A *token* is like a key. If you have it in your hand, you can open the
door. A *grant* is like a chit giving you permission to request a
key. In the RadioTAG protocol, you can't do anything with a grant
except attempt to obtain the corresponding token.

* Glossary

| Term       | Definition                                                                                                                  |
|------------+-----------------------------------------------------------------------------------------------------------------------------|
| Unpaired   | Where a device has not been associated with a user account                                                                  |
| Paired     | Where a device has been associated with a user account                                                                      |
| Grant      | Temporary permission to request a service                                                                                   |
| Scope      | What a grant applies to                                                                                                     |
| Auth Token | An authorization token which permits you to create a tag                                                                    |
| Unix Time  | The number of seconds elapsed since midnight Coordinated Universal Time (UTC) on January 1, 1970, not counting leap seconds |

* Narratives

#+INCLUDE: "narratives/unpaired-paired-inc.org"
#+INCLUDE: "narratives/anon-paired-inc.org"

* TODO API

** Some general points

Requests pass information in a combination of HTTP headers and form
encoded POST parameters.

Responses pass data back in a combination of HTTP headers and XML.

UTF-8 is the only supported character set.

** TODO Common response headers

| Name                        | Value                                                    |
|-----------------------------+----------------------------------------------------------|
| X-RadioTAG-Service-Provider | The display name of the tag service provider             |
| X-RadioTAG-Account-Name     | The display name of the associated paired account        |
| X-RadioTAG-Auth-Token       | The authorization token for an unpaired or paired client |

The =X-RadioTAG-Service-Provider= header should be returned in all
responses.

The =X-RadioTAG-Account-Name= should be returned in all responses to
requests made by a paired client.

The =X-RadioTAG-Auth-Token= header is returned when the client has
been granted authorization. It also enables the tag service to issue a
new token to replace an old one - see the next section.

** Updating tokens

The tag service can change the =X-RadioTAG-Auth-Token= in response to
any authorized request (i.e. one which contains a valid Auth
Token). The client should /always/ use the last received Auth Token
and update any stored value from that. This provides a way for a tag
service to expire tokens.

We recommend that tag service implementations allow a period of grace
in which an expired token can co-exist with its replacement. This will
address the case where the token was updated but the response was not
received by the client.

** TODO POST /tag
*** Request
**** Headers

| Name                  | Value                                   |
|-----------------------+-----------------------------------------|
| X-RadioTAG-Auth-Token | Empty OR unpaired token OR paired token |

**** Parameters

| Name    | Value                                                                      |
|---------+----------------------------------------------------------------------------|
| station | RadioDNS broadcast parameters joined with dots, e.g. "0.c224.ce15.ce1.dab" |
| time    | Whole number of seconds since 00:00a.m Jan 1 1970 UTC (Unix Epoch)         |

*** Response
**** Status

| HTTP Status Code | HTTP Status  | Explanation                                                                                                      |
|------------------+--------------+------------------------------------------------------------------------------------------------------------------|
|              200 | OK           | The service does not store tags but has returned metadata in Atom format                                         |
|              201 | Created      | The service has stored the requested tag                                                                         |
|              401 | Unauthorized | Anonymous tagging is not supported and the token is blank or does not match either an unpaired or paired account |

**** Headers

| Name                        | Value                                              |
|-----------------------------+----------------------------------------------------|
| X-RadioTAG-Service-Provider | The display name of the tag service provider       |
| X-RadioTAG-Auth-Token       | The token to use from now on.                      |
| X-RadioTAG-Account-Name     | The display name of the associated paired account. |
| X-RadioTAG-Grant-Scope      | "unpaired" or "can_register". See Grants.          |
| X-RadioTAG-Grant-Token      | The token to use when exercising the grant.        |

A grant header is /not/ returned in the following cases:
- the server supports only anonymous tags
- the client is already using a paired token
- the client is using an unpaired token and the tag service doesn't support pairing

**** Body

On a successful request (status 200 or 201), the body contains an Atom
feed containing a single entry representing the tag. See [[Data formats]]
below.

On an unsuccessful request, the body may be blank or may contain a
short explanation of why the request failed.

*** Example 1 - =POST /tag= with no token

**** Request
#+begin_example
POST /tag HTTP/1.1↵
X-RadioTAG-Auth-Token: ↵
Content-Length: 43↵
Content-Type: application/x-www-form-urlencoded↵
Host: radiotag.bbc.co.uk↵
↵
station=0.c224.ce15.ce1.dab&time=1312301004
#+end_example

**** Response
#+begin_example
HTTP/1.1 401 Unauthorized↵
Date: Tue, 02 Aug 2011 16:03:24 GMT↵
Status: 401 Unauthorized↵
X-RadioTAG-Service-Provider: BBC↵
X-RadioTAG-Grant-Scope: unpaired↵
X-RadioTAG-Grant-Token: b86bfdfb-5ff5-4cc7-8c61-daaa4804f188↵
Content-Type: text/html;charset=utf-8↵
Content-Length: 18↵
↵
Must request token
#+end_example

*** Example 2 - =POST /tag= with a valid unpaired token

**** Request
#+begin_example
POST /tag HTTP/1.1↵
X-RadioTAG-Auth-Token: be222d22-4cef-439e-a77c-c867441dcb33↵
Content-Length: 43↵
Content-Type: application/x-www-form-urlencoded↵
Host: radiotag.bbc.co.uk↵
↵
station=0.c224.ce15.ce1.dab&time=1312301004
#+end_example
**** Response
#+begin_example
HTTP/1.1 201 Created↵
Date: Tue, 02 Aug 2011 16:03:25 GMT↵
Status: 201 Created↵
X-RadioTAG-Service-Provider: BBC↵
X-RadioTAG-Grant-Scope: can_register↵
X-RadioTAG-Grant-Token: ddc7f510-9353-45ad-9202-746ffe3b663a↵
Content-Type: application/xml;charset=utf-8↵
Content-Length: 957↵
↵
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:radiotag="http://radiodns.org/2011/radiotag">
  <title>PM</title>
  <link href="http://radiotag.example.com"/>
  <link href="http://radiotag.example.com" rel="self"/>
  <updated>2011-08-02T17:03:24+01:00</updated>
  <author>
    <name>BBC</name>
  </author>
  <id>urn:uuid:fb669d2c-63b3-420b-9dd6-131f5d58e68a</id>
  <entry>
    <title>PM</title>
    <radiotag:sid>0.c224.ce15.ce1.dab</radiotag:sid>
    <radiotag:service>BBC Radio 4</radiotag:service>
    <link rel="image" href="http://node1.bbcimg.co.uk/iplayer/images/episode/b012wjd3_150_84.jpg"/>
    <link rel="canonical" href="http://www.bbc.co.uk/programmes/b012wjd3?t=204"/>
    <id>urn:uuid:fb669d2c-63b3-420b-9dd6-131f5d58e68a</id>
    <updated>2011-08-02T17:03:24+01:00</updated>
    <published>2011-08-02T17:03:24+01:00</published>
    <summary>Eddie Mair presents the day's top stories.</summary>
  </entry>
</feed>
#+end_example

Note that the response header contains the =X-RadioTAG-Grant-Scope=
=can_register=. This will be present only if the service supports
paired tagging.

*** Example 3 - =POST /tag= with a valid paired token

**** Request
#+begin_example
POST /tag HTTP/1.1↵
X-RadioTAG-Auth-Token: b48bf7ed-14a6-429e-b5c8-35f7a4c094b7↵
Content-Length: 43↵
Content-Type: application/x-www-form-urlencoded↵
Host: radiotag.bbc.co.uk↵
↵
station=0.c224.ce15.ce1.dab&time=1312302129
#+end_example
**** Response
#+begin_example
HTTP/1.1 201 Created↵
Date: Tue, 02 Aug 2011 16:22:09 GMT↵
Status: 201 Created↵
X-RadioTAG-Service-Provider: BBC↵
X-RadioTAG-Auth-Token: b48bf7ed-14a6-429e-b5c8-35f7a4c094b7↵
X-RadioTAG-Account-Name: sean↵
Content-Type: application/xml;charset=utf-8↵
Content-Length: 958↵
↵
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:radiotag="http://radiodns.org/2011/radiotag">
  <title>PM</title>
  <link href="http://radiotag.example.com"/>
  <link href="http://radiotag.example.com" rel="self"/>
  <updated>2011-08-02T17:22:09+01:00</updated>
  <author>
    <name>BBC</name>
  </author>
  <id>urn:uuid:8facc0c0-ce13-4349-8664-dc71d55c6c97</id>
  <entry>
    <title>PM</title>
    <radiotag:sid>0.c224.ce15.ce1.dab</radiotag:sid>
    <radiotag:service>BBC Radio 4</radiotag:service>
    <link rel="image" href="http://node1.bbcimg.co.uk/iplayer/images/episode/b012wjd3_150_84.jpg"/>
    <link rel="canonical" href="http://www.bbc.co.uk/programmes/b012wjd3?t=1329"/>
    <id>urn:uuid:8facc0c0-ce13-4349-8664-dc71d55c6c97</id>
    <updated>2011-08-02T17:22:09+01:00</updated>
    <published>2011-08-02T17:22:09+01:00</published>
    <summary>Eddie Mair presents the day's top stories.</summary>
  </entry>
</feed>
#+end_example

Note that the response header does not contain any grants but does
contain the paired account name.

*** Example 4 - =POST /tag= against a service that does not provide unpaired tagging

**** Request
#+begin_example
POST /tag HTTP/1.1↵
X-RadioTAG-Auth-Token: ↵
Content-Length: 43↵
Content-Type: application/x-www-form-urlencoded↵
Host: radiotag.bbc.co.uk↵
↵
station=0.c224.ce15.ce1.dab&time=1312195118
#+end_example
**** Response
#+begin_example
HTTP/1.1 200 OK↵
Date: Mon, 01 Aug 2011 10:38:38 GMT↵
Status: 200 OK↵
X-RadioTAG-Service-Provider: BBC↵
X-RadioTAG-Grant-Scope: can_register↵
X-RadioTAG-Grant-Token: ddc7f510-9353-45ad-9202-746ffe3b663a↵
Content-Type: application/xml;charset=utf-8↵
Content-Length: 992↵
↵
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:radiotag="http://radiodns.org/2011/radiotag">
  <title>Meet David Sedaris</title>
  <link href="http://radiotag.example.com"/>
  <link href="http://radiotag.example.com" rel="self"/>
  <updated>2011-08-01T11:38:38+01:00</updated>
  <author>
    <name>BBC</name>
  </author>
  <id>urn:uuid:5001c814-7a28-42a4-b35a-eef17abc7249</id>
  <entry>
    <title>Meet David Sedaris</title>
    <radiotag:sid>0.c224.ce15.ce1.dab</radiotag:sid>
    <radiotag:service>BBC Radio 4</radiotag:service>
    <link rel="image" href="http://node1.bbcimg.co.uk/iplayer/images/episode/b01211y4_150_84.jpg"/>
    <link rel="canonical" href="http://www.bbc.co.uk/programmes/b01211y4?t=518"/>
    <id>urn:uuid:5001c814-7a28-42a4-b35a-eef17abc7249</id>
    <updated>2011-08-01T11:38:38+01:00</updated>
    <published>2011-08-01T11:38:38+01:00</published>
    <summary>'Me Talk Pretty One Day' and 'It's Catching'.</summary>
  </entry>
</feed>
#+end_example

*** Example 5 - =POST /tag= against a service that provides only anonymous tagging

**** Request
#+begin_example
POST /tag HTTP/1.1↵
X-RadioTAG-Auth-Token: ↵
Content-Length: 43↵
Content-Type: application/x-www-form-urlencoded↵
Host: radiotag.bbc.co.uk↵
↵
station=0.c224.ce15.ce1.dab&time=1312195118
#+end_example
**** Response
#+begin_example
HTTP/1.1 200 OK↵
Date: Mon, 01 Aug 2011 10:38:38 GMT↵
Status: 200 OK↵
X-RadioTAG-Service-Provider: BBC↵
Content-Type: application/xml;charset=utf-8↵
Content-Length: 992↵
↵
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:radiotag="http://radiodns.org/2011/radiotag">
  <title>Meet David Sedaris</title>
  <link href="http://radiotag.example.com"/>
  <link href="http://radiotag.example.com" rel="self"/>
  <updated>2011-08-01T11:38:38+01:00</updated>
  <author>
    <name>BBC</name>
  </author>
  <id>urn:uuid:5001c814-7a28-42a4-b35a-eef17abc7249</id>
  <entry>
    <title>Meet David Sedaris</title>
    <radiotag:sid>0.c224.ce15.ce1.dab</radiotag:sid>
    <radiotag:service>BBC Radio 4</radiotag:service>
    <link rel="image" href="http://node1.bbcimg.co.uk/iplayer/images/episode/b01211y4_150_84.jpg"/>
    <link rel="canonical" href="http://www.bbc.co.uk/programmes/b01211y4?t=518"/>
    <id>urn:uuid:5001c814-7a28-42a4-b35a-eef17abc7249</id>
    <updated>2011-08-01T11:38:38+01:00</updated>
    <published>2011-08-01T11:38:38+01:00</published>
    <summary>'Me Talk Pretty One Day' and 'It's Catching'.</summary>
  </entry>
</feed>
#+end_example

Note that no grant headers are issued.

** TODO POST /token
*** Request
**** Headers

None.

**** Parameters

| Name        | Value                                                                    |
|-------------+--------------------------------------------------------------------------|
| grant_scope | The value of the X-RadioTAG-Grant-Scope provided in the previous request |
| grant_token | The value of the X-RadioTAG-Grant-Token provided in the previous request |

For more information, see [[Grants]].

**** Example

#+begin_example
POST /token HTTP/1.1↵
Content-Length: 69↵
Content-Type: application/x-www-form-urlencoded↵
Host: radiotag.bbc.co.uk↵
↵
grant_scope=unpaired&grant_token=b86bfdfb-5ff5-4cc7-8c61-daaa4804f188
#+end_example

*** Response

**** Status

| HTTP Status Code | HTTP Status  | Explanation                                                           |
|------------------+--------------+-----------------------------------------------------------------------|
|              204 | No Content   | The token was successfully created                                    |
|              401 | Unauthorized | The grant is missing or invalid                                       |
|              403 | Forbidden    | The grant is valid but the client is not allowed to make this request |

**** TODO Headers

| Name                        | Value                                              |
|-----------------------------+----------------------------------------------------|
| X-RadioTAG-Service-Provider | The display name of the tag service provider       |
| X-RadioTAG-Auth-Token       | The newly issued token to use for future requests. |

**** Body

The =/token= endpoint should not return any content (as denoted by the
204 status code).

**** Example

#+begin_example
HTTP/1.1 204 No Content↵
Date: Tue, 02 Aug 2011 16:22:08 GMT↵
Status: 204 No Content↵
X-RadioTAG-Service-Provider: BBC↵
X-RadioTAG-Auth-Token: cf7ce9dc-7762-4b4c-970a-d194c5aa03ed↵
↵
#+end_example

** TODO GET /tags
*** Request

**** Headers

| Name                  | Value                          |
|-----------------------+--------------------------------|
| X-RadioTAG-Auth-Token | Unpaired token OR paired token |

**** Parameters

None.

**** Example

#+begin_example
GET /tags HTTP/1.1↵
X-RadioTAG-Auth-Token: cf7ce9dc-7762-4b4c-970a-d194c5aa03ed↵
Host: radiotag.bbc.co.uk↵
↵
#+end_example
*** Response
**** Status

| HTTP Status Code | HTTP Status  | Explanation                                                        |
|------------------+--------------+--------------------------------------------------------------------|
|              200 | OK           | The request was successful                                         |
|              401 | Unauthorized | The token is invalid or the service does not allow storing of tags |

**** Headers

| Name                        | Value                                                                                |
|-----------------------------+--------------------------------------------------------------------------------------|
| X-RadioTAG-Account-Name     | The display name of the associated paired account (if applicable)                    |
| X-RadioTAG-Service-Provider | The display name of the tag service provider                                         |
| X-RadioTAG-Grant-Scope      | If the service provides pairing, this will have the value =can_register=. See [[Grants]] |
| X-RadioTAG-Grant-Token      | The token to use when exercising the =can_register= grant                            |

**** Body
**** Example

#+begin_example
HTTP/1.1 200 OK↵
Date: Tue, 02 Aug 2011 16:22:08 GMT↵
Status: 200 OK↵
X-RadioTAG-Service-Provider: BBC↵
X-RadioTAG-Grant-Scope: can_register↵
X-RadioTAG-Grant-Token: ddc7f510-9353-45ad-9202-746ffe3b663a↵
Content-Type: application/xml;charset=utf-8↵
Content-Length: 974↵
↵
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:radiotag="http://radiodns.org/2011/radiotag">
  <title>Tag List</title>
  <link href="http://radiotag.example.com/tags"/>
  <link href="http://radiotag.example.com/tags" rel="self"/>
  <updated>2011-08-02T17:22:08+01:00</updated>
  <author>
    <name>BBC</name>
  </author>
  <id>urn:uuid:6a041e97-65bb-4b12-82da-c1b373731905</id>
  <entry>
    <title>PM</title>
    <radiotag:sid>0.c224.ce15.ce1.dab</radiotag:sid>
    <radiotag:service>BBC Radio 4</radiotag:service>
    <link rel="image" href="http://node1.bbcimg.co.uk/iplayer/images/episode/b012wjd3_150_84.jpg"/>
    <link rel="canonical" href="http://www.bbc.co.uk/programmes/b012wjd3?t=1328"/>
    <id>urn:uuid:9f61f2c1-f3f7-4ff7-bc61-32f0e468054d</id>
    <updated>2011-08-02T17:22:08+01:00</updated>
    <published>2011-08-02T17:22:08+01:00</published>
    <summary>Eddie Mair presents the day's top stories.</summary>
  </entry>
</feed>
#+end_example
** TODO POST /registration_key
*** Request

**** Headers

| Name                  | Value                                  |
|-----------------------+----------------------------------------|
| X-RadioTAG-Auth-Token | Either blank or a valid unpaired token |

**** Parameters

| Name        | Value                                                  |
|-------------+--------------------------------------------------------|
| grant_scope | Must be the value =can_register=                       |
| grant_token | Must be the grant token issued in the previous request |

**** Example

#+begin_example
POST /registration_key HTTP/1.1↵
Content-Length: 73↵
Content-Type: application/x-www-form-urlencoded↵
Host: radiotag.bbc.co.uk↵
↵
grant_scope=can_register&grant_token=ddc7f510-9353-45ad-9202-746ffe3b663a
#+end_example
*** Response

**** Status

| HTTP Status Code | HTTP Status | Explanation                                                                                               |
|------------------+-------------+-----------------------------------------------------------------------------------------------------------|
|              204 | No Content  | The request was successful. The response headers contain the registration key required to pair the radio. |

**** Headers

| Name                        | Value                                                |
|-----------------------------+------------------------------------------------------|
| X-RadioTAG-Service-Provider | The display name of the tag service provider         |
| X-RadioTAG-Registration-Key | The registration key to use when pairing the device. |
| X-RadioTAG-Registration-Url | The url to visit to register the device.             |

**** Body

This response contains no body.

**** Example

#+begin_example
HTTP/1.1 204 No Content↵
Date: Tue, 02 Aug 2011 16:22:09 GMT↵
Status: 204 No Content↵
X-RadioTAG-Service-Provider: BBC↵
X-RadioTAG-Registration-Key: 2b188492↵
X-RadioTAG-Registration-Url: http://radiotag.example.com/↵
↵
#+end_example

** TODO POST /register
*** Request

**** Headers

| Name                  | Value                          |
|-----------------------+--------------------------------|
| X-RadioTAG-Auth-Token | Unpaired token OR paired token |

**** Parameters

| Name             | Value                                                              |
|------------------+--------------------------------------------------------------------|
| registration_key | The registration key returned from the =/registration_key= request |
| pin              | The PIN issued to the user (e.g. at a web front end).              |

**** Example

#+begin_example
POST /register HTTP/1.1↵
X-RadioTAG-Auth-Token: cf7ce9dc-7762-4b4c-970a-d194c5aa03ed↵
Content-Length: 34↵
Content-Type: application/x-www-form-urlencoded↵
Host: radiotag.bbc.co.uk↵
↵
registration_key=2b188492&pin=3612
#+end_example

*** Response

**** Status

| HTTP Status Code | HTTP Status | Explanation                                                                             |
|------------------+-------------+-----------------------------------------------------------------------------------------|
|              204 | No Content  | The registration has succeeded and the device has been paired to the associated account |

**** Headers

| Name                        | Value                                             |
|-----------------------------+---------------------------------------------------|
| X-RadioTAG-Service-Provider | The display name of the tag service provider      |
| X-RadioTAG-Auth-Token       | The token to use for future requests              |
| X-RadioTAG-Account-Name     | The display name of the associated paired account |

**** Body

There is no body returned in this response.

**** Example

#+begin_example
HTTP/1.1 201 Created↵
Date: Tue, 02 Aug 2011 16:22:09 GMT↵
Status: 204 No Content↵
X-RadioTAG-Service-Provider: BBC↵
X-RadioTAG-Auth-Token: b48bf7ed-14a6-429e-b5c8-35f7a4c094b7↵
X-RadioTAG-Account-Name: sean↵
↵
#+end_example

* Data formats
** Tag data

All server responses containing tags use the [[rfc:4287][Atom Syndication Format]]
to represent tags, with some extensions under a =RadioTAG= namespace.

In the following, the element prefix "radiotag:" indicates the
RadioTag namespace. All other elements are assumed to be from the Atom
namespace.

Atom defines these elements as required:

| Element | Description                           | Max length |
|---------+---------------------------------------+------------|
| id      | unique identifier for this tag [[http://tools.ietf.org/html/rfc4287#section-4.2.6][ref]]    |         48 |
| title   | broadcaster generated title [[http://tools.ietf.org/html/rfc4287#section-4.2.14][ref]]       |        128 |
| updated | the datetime the tag was modified [[http://tools.ietf.org/html/rfc4287#section-4.2.15][ref]] |         20 |
|         |                                       |            |

All dates are UTC in ISO format ([[wp:ISO8601][ISO 8601]] or [[rfc:3339][RFC 3339]]),
e.g. =2011-08-08T09:00:00Z=.

The RadioTAG specification also requires the following:

| Element          | Description                                     | Max length |
|------------------+-------------------------------------------------+------------|
| author           | name of tag service provider (e.g. BBC, Global) |         16 |
| published        | the datetime of creation (= tag time)           |         20 |
| summary          | text only - i.e. must not include HTML tags     |        180 |
| link rel="image" | link to 100x100 image representing the tag      |        255 |
| link rel="self"  | a user accessible url for the tag               |        255 |
| radiotag:service | the human-readable name of the service tagged   |         16 |
| radiotag:sid     | RadioDNS service identifier                     |         32 |

Note the difference here between =id= and @<tt>link
rel="self"@</tt>. =id= is a globally unique identifier. @<tt>link
rel="self"@</tt> gives the url as visible to the device/user
(i.e. scoped by the auth token).

Also note that we are interpreting the =published= entry as equivalent
to the tag time. The =updated= element can be used to indicate that
the tag data has been updated, e.g. the description has changed.

The 255 character limit on urls is based on a strict reading of the
note in paragraph 3 of [[http://tools.ietf.org/html/rfc2616#section-3.2.1][RFC 2616 Section 3.2.1]].

The =radiotag:service= limit matches the =mediumNameType= in the EPG
specifications (and also the DAB label length).

The example below shows these elements in context:

#+begin_example
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:radiotag="http://radiodns.org/2011/radiotag">
  <title>Meet David Sedaris</title>
  <link href="http://radiotag.example.com"/>
  <link href="http://radiotag.example.com" rel="self"/>
  <updated>2011-08-01T11:38:38+01:00</updated>
  <author>
    <name>BBC</name>
  </author>
  <id>urn:uuid:5001c814-7a28-42a4-b35a-eef17abc7249</id>
  <entry>
    <title>Meet David Sedaris</title>
    <radiotag:sid>0.c224.ce15.ce1.dab</radiotag:sid>
    <radiotag:service>BBC Radio 4</radiotag:service>
    <link rel="image" href="http://node1.bbcimg.co.uk/iplayer/images/episode/b01211y4_150_84.jpg"/>
    <link rel="canonical" href="http://www.bbc.co.uk/programmes/b01211y4?t=518"/>
    <id>urn:uuid:5001c814-7a28-42a4-b35a-eef17abc7249</id>
    <updated>2011-08-01T11:38:38+01:00</updated>
    <published>2011-08-01T11:38:38+01:00</published>
    <summary>'Me Talk Pretty One Day' and 'It's Catching'.</summary>
  </entry>
</feed>
#+end_example

** Tags data
#+begin_example
<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:radiotag="http://radiodns.org/2011/radiotag">
  <title>Tag List</title>
  <link href="http://radiotag.example.com/tags"/>
  <link href="http://radiotag.example.com/tags" rel="self"/>
  <updated>2011-08-02T17:22:09+01:00</updated>
  <author>
    <name>BBC</name>
  </author>
  <id>urn:uuid:bf3e7d30-ccb8-4b45-b438-c790fb2ec5f7</id>
  <entry>
    <title>PM</title>
    <radiotag:sid>0.c224.ce15.ce1.dab</radiotag:sid>
    <radiotag:service>BBC Radio 4</radiotag:service>
    <link rel="image" href="http://node1.bbcimg.co.uk/iplayer/images/episode/b012wjd3_150_84.jpg"/>
    <link rel="canonical" href="http://www.bbc.co.uk/programmes/b012wjd3?t=1329"/>
    <id>urn:uuid:8facc0c0-ce13-4349-8664-dc71d55c6c97</id>
    <updated>2011-08-02T17:22:09+01:00</updated>
    <published>2011-08-02T17:22:09+01:00</published>
    <summary>Eddie Mair presents the day's top stories.</summary>
  </entry>
  <entry>
    <title>PM</title>
    <radiotag:sid>0.c224.ce15.ce1.dab</radiotag:sid>
    <radiotag:service>BBC Radio 4</radiotag:service>
    <link rel="image" href="http://node1.bbcimg.co.uk/iplayer/images/episode/b012wjd3_150_84.jpg"/>
    <link rel="canonical" href="http://www.bbc.co.uk/programmes/b012wjd3?t=1328"/>
    <id>urn:uuid:9f61f2c1-f3f7-4ff7-bc61-32f0e468054d</id>
    <updated>2011-08-02T17:22:08+01:00</updated>
    <published>2011-08-02T17:22:08+01:00</published>
    <summary>Eddie Mair presents the day's top stories.</summary>
  </entry>
  <entry>
    <title>PM</title>
    <radiotag:sid>0.c224.ce15.ce1.dab</radiotag:sid>
    <radiotag:service>BBC Radio 4</radiotag:service>
    <link rel="image" href="http://node1.bbcimg.co.uk/iplayer/images/episode/b012wjd3_150_84.jpg"/>
    <link rel="canonical" href="http://www.bbc.co.uk/programmes/b012wjd3?t=1328"/>
    <id>urn:uuid:8e67aef6-4e8c-47ac-bc10-f89d4d5bac17</id>
    <updated>2011-08-02T17:22:08+01:00</updated>
    <published>2011-08-02T17:22:08+01:00</published>
    <summary>Eddie Mair presents the day's top stories.</summary>
  </entry>
</feed>
#+end_example

* Limits

** Data elements

| Data element     | Max. size in bytes | Notes                                         |
|------------------+--------------------+-----------------------------------------------|
| author           |                 16 | Atom entry                                    |
| id               |                 48 | Atom entry                                    |
| pin number       |                 10 |                                               |
| service id (sid) |                 32 | As specified by RadioDNS                      |
| summary          |                180 | Atom entry                                    |
| title            |                128 | Atom entry (compatible with DAB/RDS Livetext) |
| token            |                 48 |                                               |
| url              |                255 | See [[http://tools.ietf.org/html/rfc2616#section-3.2.1][RFC 2616 Section 3.2.1]]                    |

** HTTP Headers

| Headers                     | Max. size in bytes |
|-----------------------------+--------------------|
| X-RadioTAG-Account-Name     |                 48 |
| X-RadioTAG-Auth-Token       |                 48 |
| X-RadioTAG-Grant-Scope      |                 16 |
| X-RadioTAG-Grant-Token      |                 48 |
| X-RadioTAG-Registration-Key |                 10 |
| X-RadioTAG-Registration-Url |                128 |
| X-RadioTAG-Service-Provider |                 16 |

* COMMENT TODO
** Still TODO
*** TODO Edit Narratives
*** TODO Intro blurb for each API
*** TODO RadioDNS lookup for _radiotag
*** TODO HTTPS
*** TODO Bit more blurb on data formats
*** TODO Upgrading to paired tagging
*** TODO Add more to Glossary
*** TODO Limits - others to add? Check with Robin
** Already DONE
*** DONE Change all examples to use updated versions
CLOSED: [2011-08-11 Thu 14:33]
- the dates all show +01:00 instead of Z
- narratives have old API
*** DONE Get rid of Validate footer
CLOSED: [2011-08-11 Thu 14:33]
*** DONE Explanation of tokens and grants
CLOSED: [2011-08-10 Wed 22:08]

A *token* is like a key. If you have it in your hand, you can open the
door. A *grant* is like a chit giving you permission to go and get a
key. In the RadioTAG protocol, you can't do anything with a grant
except attempt to obtain the corresponding token.

*** DONE Remove trace of getting auth and replace with text
CLOSED: [2011-08-11 Thu 16:39]
